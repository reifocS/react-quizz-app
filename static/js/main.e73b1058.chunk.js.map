{"version":3,"sources":["components.jsx","Api.js","QuestionContainer.js","Answers.js","Tab.js","Tabs.js","Recap.js","EndGame.js","Game.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","SettingsContainer","Loader","button","QuestionWrapper","section","QuizzInput","EmphasizedInput","QuizzText","h1","p","TabList","ol","TabItem","li","TabItemActive","TabContainer","TabContent","Table","table","TableRow","td","OptionQuizz","option","QuizzLabel","label","QuizzSelect","select","getQuestions","a","numberOfQuestions","category","difficulty","endPoint","url","axios","get","response","data","getCategories","Error","QuestionContainer","question","children","useEffect","he","decode","Answers","answers","confirmAnswer","map","ans","key","onClick","Tab","props","this","activeTab","Component","Tabs","onClickTabItem","tab","setState","state","child","Recap","bilan","r","correct","value","EndGame","points","style","length","colSpan","Game","options","useState","questions","setQuestions","loading","setIsLoading","error","setIsError","actualQuestionIndex","setActualQuestionIndex","isFinished","setIsFinished","score","incrementScore","cache","updateCache","results","console","log","fetchData","actualQuestion","correctAnswer","correct_answer","updatedCache","recap","push","actualIndex","nextIndex","parseInt","getNextQuestion","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","incorrect_answers","getAnswers","categoryCache","App","game","startGame","categories","setCaterory","setOptions","trivia_categories","handleChange","ev","name","target","htmlFor","onChange","id","cat","disabled","Object","values","every","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e73b1058.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n\r\nexport const AppContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #0066ff;\r\n    height : 100vh;\r\n    width : 100vw;\r\n    font-family: 'Titillium Web', sans-serif;    \r\n`\r\nexport const SettingsContainer = styled.div`\r\n    display : flex;\r\n    flex-direction : column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\n\r\nexport const Button = styled.button`\r\n  font-size: 1em;\r\n  margin: 1em;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid palevioletred;\r\n  border-radius: 3px;\r\n`;\r\n\r\n\r\nexport const Loader = styled.div`\r\n    border: 16px solid #f3f3f3; /* Light grey */\r\n    border-top: 16px solid #3498db; /* Blue */\r\n    border-radius: 50%;\r\n    width: 120px;\r\n    height: 120px;\r\n    animation: spin 2s linear infinite;\r\n  \r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }`\r\n\r\n\r\nexport const QuestionWrapper = styled.section`\r\n    display : flex;\r\n    flex-direction : column;\r\n    text-align : center;\r\n    width : 40%;\r\n  `\r\n\r\n\r\nexport const RadioWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction : column;\r\n  `\r\n\r\nexport const RecapContainer = styled.div`\r\n    display : flex;\r\n    flex-direction : column;\r\n  `\r\n\r\nexport const Bilan = styled.div`\r\n  border: 2px solid palevioletred;\r\n  border-radius: 3px;\r\n  \r\n  `\r\n\r\n\r\nexport const QuizzInput = styled.button`\r\nborder-radius: 48.5px;\r\nbackground-color: #ffffff;\r\nfont-size: 18.5px;\r\nfont-weight: normal;\r\nfont-stretch: normal;\r\nfont-style: normal;\r\nline-height: normal;\r\nletter-spacing: -0.19px;\r\ncolor: #000000;\r\nmargin-bottom: 20px;\r\npadding: 18px 64px;\r\nborder : none;\r\ncursor : pointer;\r\n&:hover{\r\n    background-color: #d5d5d5;\r\n  }\r\n\r\n&:focus{\r\n    outline: none;\r\n}\r\n`\r\n\r\nexport const EmphasizedInput = styled(QuizzInput)`\r\n    background-color : red; \r\n    color : white;\r\n\r\n    &:disabled {\r\n        background-color : palevioletred;\r\n\r\n    }\r\n\r\n    &:disabled:hover {\r\n        background-color : palevioletred;\r\n\r\n    }\r\n    &:hover{\r\n        background-color : red;\r\n    }\r\n`\r\n\r\n\r\nexport const QuizzTitle = styled.h1`\r\n  color : white;\r\n  font-size : 40px;\r\n`\r\n\r\nexport const QuizzText = styled.p`\r\n  color: white;\r\n  font-size : 25px;\r\n`\r\n\r\n\r\nexport const TabList = styled.ol`\r\n    border-bottom: 1px solid #ccc;\r\n    padding-left: 0;\r\n`\r\n\r\nexport const TabItem = styled.li`\r\n    display: inline-block;\r\n    list-style: none;\r\n    margin-bottom: -1px;\r\n    padding: 0.5rem 0.75rem;\r\n    cursor : pointer;\r\n`\r\n\r\nexport const TabItemActive = styled(TabItem)`\r\n    background-color: white;\r\n    border: solid #ccc;\r\n    border-width: 1px 1px 0 1px;\r\n`\r\n\r\nexport const TabContainer = styled.div`\r\n    display : flex;\r\n    flex-direction : column;\r\n    background-color: white;\r\n    width : 60vw;\r\n    height : 70vh;\r\n    padding : 30px;\r\n    border-radius: 12px;`\r\n\r\n\r\n\r\nexport const TabContent = styled.div`\r\n    overflow-y : auto;\r\n`\r\n\r\nexport const Table = styled.table`\r\n    border: 1px solid #333;\r\n`\r\nexport const TableRow = styled.td`\r\n    border: 1px solid #333;\r\n    padding : 10px;\r\n`\r\n\r\nexport const OptionQuizz = styled.option`\r\n    padding:8px;\r\n`\r\n\r\nexport const QuizzLabel = styled.label`\r\n    color: white;\r\n    font-size:22px;\r\n`\r\n\r\nexport const QuizzSelect = styled.select`\r\n    padding:8px;\r\n    width : 100%;\r\n    margin-bottom : 16px;\r\n    border-radius : 12px;\r\n    font-size:22px;\r\n`","import axios from 'axios';\r\n\r\n\r\nconst baseUrl = \"https://opentdb.com/api.php\"\r\n\r\nconst getUrl = (endPoint) => {\r\n    return `${baseUrl}?${endPoint}`\r\n}\r\nexport const getQuestions = async ({numberOfQuestions, category, difficulty}) => {\r\n    let url = getUrl(`&amount=${numberOfQuestions}&category=${category}&difficulty=${difficulty}&type=multiple`)\r\n    let response = await axios.get(url);\r\n    return response.data;\r\n}\r\n\r\nexport const getCategories = async () => {\r\n    try {\r\n        let response = await axios.get(\"https://opentdb.com/api_category.php\");\r\n        return response.data;\r\n    } catch (error) {\r\n        throw new Error(\"Unable to fetch categories\", error);\r\n    };\r\n}","import React, {useEffect} from 'react'\r\nimport { QuestionWrapper, QuizzText } from './components'\r\nimport he from 'he'\r\nconst QuestionContainer = ({ question, children }) => {\r\n    \r\n    useEffect(() => {\r\n    }, []);\r\n\r\n   \r\n    return (\r\n        <QuestionWrapper>\r\n            <QuizzText>{`Category : ${question.category}`}</QuizzText>\r\n            <QuizzText> {he.decode(question.question)}</QuizzText>\r\n            {children}\r\n        </QuestionWrapper>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionContainer;","import React from 'react'\r\nimport { QuizzInput } from './components'\r\n\r\n\r\nconst Answers = ({ answers, confirmAnswer }) => {\r\n\r\n    return (\r\n        answers.map(ans => <QuizzInput key={ans} onClick={() => confirmAnswer(ans)}>{ans}</QuizzInput>)\r\n    )\r\n}\r\n\r\n\r\nexport default Answers;","import React, { Component } from 'react';\r\nimport { TabItem, TabItemActive } from './components'\r\n\r\n\r\nclass Tab extends Component {\r\n\r\n    onClick = () => {\r\n        const { label, onClick } = this.props;\r\n        onClick(label);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n\r\n        return (\r\n\r\n            activeTab === label ?\r\n                <TabItemActive onClick={onClick}\r\n                >\r\n                    {label}\r\n                </TabItemActive>\r\n                :\r\n                <TabItem onClick={onClick}>{label}</TabItem>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Tab;","import React, { Component } from 'react';\r\n\r\nimport Tab from './Tab';\r\nimport { TabList, TabContent } from './components'\r\n\r\nclass Tabs extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  onClickTabItem = (tab) => {\r\n    this.setState({ activeTab: tab });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClickTabItem,\r\n      props: {\r\n        children,\r\n      },\r\n      state: {\r\n        activeTab,\r\n      }\r\n    } = this;\r\n\r\n    return (\r\n      <div>\r\n        <TabList>\r\n          {children.map((child) => {\r\n            const { label } = child.props;\r\n\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={label}\r\n                label={label}\r\n                onClick={onClickTabItem}\r\n              />\r\n            );\r\n          })}\r\n        </TabList>\r\n        <TabContent>\r\n          {children.map((child) => {\r\n            if (child.props.label !== activeTab) return null;\r\n            return child.props.children;\r\n          })}\r\n        </TabContent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tabs;","import React from 'react'\r\nimport { TableRow } from './components'\r\n\r\nconst Recap = ({ bilan }) => {\r\n\r\n    return bilan.map(r => {\r\n        return (\r\n            <tr key={r.correct}>\r\n                <TableRow>{`${r.question}`}</TableRow>\r\n                <TableRow>{`${r.value}`} </TableRow>\r\n                <TableRow>{`${r.correct}`}</TableRow>\r\n            </tr>\r\n        )\r\n    }\r\n    );\r\n}\r\n\r\nexport default Recap; ","import React from 'react';\r\nimport { TabContainer, TabContent, Table, TableRow } from './components'\r\nimport Tabs from './Tabs';\r\nimport Recap from './Recap';\r\n\r\nconst EndGame = ({ points, bilan }) => {\r\n    return (\r\n        <TabContainer>\r\n            <h1>Tabs Demo</h1>\r\n            <div style={{\"overflow\" : \"auto\"}}>\r\n            <Tabs>\r\n                <TabContent label=\"Stats\">\r\n                    You scored {points} out of {bilan.length} !\r\n        </TabContent>\r\n                <TabContent label=\"Answers\">\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"3\">Results</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <TableRow>Question</TableRow>\r\n                                <TableRow>Your answer</TableRow>\r\n                                <TableRow>Correct answer</TableRow>\r\n                            </tr>\r\n                            <Recap bilan={bilan}/>\r\n                        </tbody>\r\n                    </Table>\r\n                </TabContent>\r\n            </Tabs>\r\n            </div>\r\n        </TabContainer>\r\n    );\r\n}\r\n\r\n\r\nexport default EndGame;","import React, { useState, useEffect } from 'react'\r\nimport { Loader } from './components'\r\nimport { getQuestions } from './Api'\r\nimport QuestionContainer from './QuestionContainer'\r\nimport Answers from './Answers'\r\nimport { shuffle } from './utils'\r\nimport he from 'he'\r\nimport EndGame from './EndGame'\r\n\r\nconst Game = ({ options }) => {\r\n\r\n    const [questions, setQuestions] = useState([])\r\n    const [loading, setIsLoading] = useState(false);\r\n    const [error, setIsError] = useState(false);\r\n    const [actualQuestionIndex, setActualQuestionIndex] = useState(0);\r\n    const [isFinished, setIsFinished] = useState(false)\r\n    const [score, incrementScore] = useState(0);\r\n    const [cache, updateCache] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setIsLoading(true);\r\n            setIsError(false);\r\n            try {\r\n                let response = await getQuestions(options);\r\n                if (response) {\r\n                    setQuestions(response.results);\r\n                }\r\n                else\r\n                    setIsError(true);\r\n            }\r\n            catch (err) {\r\n                setIsError(true);\r\n                console.log(err);\r\n            }\r\n\r\n            setIsLoading(false);\r\n        }\r\n        fetchData();\r\n    }, [options]);\r\n\r\n\r\n    const getNextQuestion = (actualIndex) => {\r\n        let nextIndex = actualIndex + 1;\r\n        if (nextIndex >= parseInt(options.numberOfQuestions))\r\n            setIsFinished(true)\r\n        else\r\n            setActualQuestionIndex(nextIndex);\r\n    }\r\n\r\n    const getAnswers = (actualQuestion) => {\r\n        let answers = shuffle([...actualQuestion.incorrect_answers, actualQuestion.correct_answer]);\r\n        answers = answers.map(ans => he.decode(ans))\r\n        return answers;\r\n    }\r\n\r\n\r\n    const confirmAnswer = (value, actualQuestion) => {\r\n        let correctAnswer = he.decode(actualQuestion.correct_answer)\r\n        if (value === correctAnswer)\r\n            incrementScore(score + 1);\r\n        let updatedCache = [...cache];\r\n        let recap = {\r\n            question: he.decode(actualQuestion.question),\r\n            value: value,\r\n            correct: correctAnswer\r\n        }\r\n        updatedCache.push(recap)\r\n        updateCache(updatedCache);\r\n        getNextQuestion(actualQuestionIndex)\r\n    }\r\n\r\n\r\n\r\n    if (error)\r\n        return <p>Something went wrong</p>\r\n    /*\r\n        if (isFinished)\r\n            return (\r\n                <RecapContainer>\r\n                    <QuizzText>Score {`${score} on ${amountOfQuestion}`}</QuizzText>\r\n                    <Recap bilan={cache}/>\r\n                </RecapContainer>\r\n            )\r\n       */\r\n    if (isFinished)\r\n        return <EndGame points={score} bilan={cache}/>\r\n\r\n    let actualQuestion = questions[actualQuestionIndex];\r\n\r\n    return (\r\n        <>\r\n            {loading || !actualQuestion ? <Loader /> : (\r\n                <QuestionContainer question={actualQuestion}>\r\n                    <Answers answers={getAnswers(actualQuestion)} confirmAnswer={(value) => confirmAnswer(value, actualQuestion)} />\r\n                </QuestionContainer>)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Game;","export function shuffle(array) {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n\r\nexport function createMarkup(item) {\r\n    return { __html: item };\r\n}","import React, { useState, useEffect } from 'react';\nimport Game from './Game'\nimport { EmphasizedInput, AppContainer, SettingsContainer, OptionQuizz, QuizzLabel, QuizzSelect } from './components';\nimport { getCategories } from './Api'\n\n\nlet categoryCache = null;\n\nfunction App() {\n  const [game, startGame] = useState(false)\n  const [categories, setCaterory] = useState([]);\n\n  const [options, setOptions] = useState({\n    difficulty: '',\n    numberOfQuestions: '',\n    category: ''\n  })\n\n\n\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        let response = await getCategories();\n        if (response) {\n          setCaterory(response.trivia_categories);\n          categoryCache = response.trivia_categories;\n        }\n      }\n      catch (err) {\n        console.log(err);\n      }\n    }\n    if (!categoryCache)\n      fetchData();\n  }, []);\n\n\n  if (game)\n    return (\n      <AppContainer>\n        <Game options={options} />\n      </AppContainer>\n    )\n\n\n  const handleChange = (ev) => {\n    const name = ev.target.name;\n    const value = ev.target.value;\n    setOptions({...options, [name] : value })\n  }\n\n  const validateOptions = () => {\n    return Object.values(options).every(value => value !== '');\n  }\n\n  return (\n    <AppContainer>\n      <SettingsContainer>\n        <QuizzLabel htmlFor=\"category-select\">Choose a category:</QuizzLabel>\n        <QuizzSelect value={options.category} onChange={handleChange} name=\"category\" id=\"category-select\">\n          <OptionQuizz value=\"\">--Please choose a category--</OptionQuizz>\n          {categories.map(cat => <OptionQuizz key={cat.id} value={cat.id}>{cat.name}</OptionQuizz>)}\n        </QuizzSelect>\n\n        <QuizzLabel htmlFor=\"category-select\">Choose a difficulty:</QuizzLabel>\n        <QuizzSelect value={options.difficulty} onChange={handleChange} name=\"difficulty\" id=\"category-select\">\n          <OptionQuizz value=\"\">--Please choose a difficulty--</OptionQuizz>\n          <OptionQuizz value=\"easy\">Easy</OptionQuizz>\n          <OptionQuizz value=\"medium\">Medium</OptionQuizz>\n          <OptionQuizz value=\"hard\">Hard</OptionQuizz>\n\n        </QuizzSelect>\n\n        <QuizzLabel htmlFor=\"category-select\">Choose number of question:</QuizzLabel>\n        <QuizzSelect value={options.numberOfQuestions} onChange={handleChange} name=\"numberOfQuestions\" id=\"category-select\">\n          <OptionQuizz value=\"\">--Please choose a number of question--</OptionQuizz>\n          <OptionQuizz value=\"2\">2</OptionQuizz>\n          <OptionQuizz value=\"5\">5</OptionQuizz>\n          <OptionQuizz value=\"7\">7</OptionQuizz>\n          <OptionQuizz value=\"10\">10</OptionQuizz>\n        </QuizzSelect>\n\n        <EmphasizedInput disabled={!validateOptions()} onClick={() => startGame(true)}>Start Quizz</EmphasizedInput>\n      </SettingsContainer>\n    </AppContainer>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}